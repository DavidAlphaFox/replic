* Replic

Building a  readline application is  cool, but readline gives  you the
basics  and you  must still  build  a REPL  around it:  loop and  read
commands, catch a =C-c=, a =C-d=,  ask confirmation to quit, print the
general help, help of a command, setup completions, load an init file,
colorize output,...  =replic= does this for you.

You can use =replic= as a ready-to-use executable or as a library.

Using  the executable,  you can  define functions  and variables  in
=~/.replic.lisp=, give them completion candidates, and use them on the
replic command line.

With the library you can automatically  build a
REPL and turn functions you already have into commands in the readline prompt,
with the process described below.

There are a few examples below, in =src/examples.lisp= and expect more to come.

This  is an  attempt at  generalizing what  I did  several times  with
=cl-readline=.

What this is *not*:

- this  is  not a  Lisp  REPL.  See [[https://github.com/koji-kojiro/cl-repl][cl-repl]]  for  that  (itself not  a
  replacement for Slime ;) )
- this is not a shell

Example applications built on replic:

- [[https://github.com/vindarel/cl-torrents][cl-torrents]]
- [[https://github.com/vindarel/cl-bookshops][cl-bookshops]]

=! experimental !=


** Installation

Either download the executable, or clone this repo into =~/quicklisp/local-projects/=.


Then build the executable with =make build=.

: replic -h

#+BEGIN_EXPORT ascii
Available options:
  -h, --help               Print this help and exit.
  -q, --quiet              Do not load the init file.
  -l, --load ARG           Load the given file.
#+END_EXPORT

run:

: ./replic

and

: help
: help help


** The executable and the init file

Given the example =~/.replic.lisp= below, you can
try =hello <name>= (completion for =hello=) and =goodbye <name>=,
where <name> can be completed from what was given to =hello=.

#+BEGIN_SRC lisp
(in-package :replic.user)

(defparameter *names* '()
  "List of names (string) given to `hello`. Will be autocompleted by `goodbye`.")

(defun hello (name)
  "Takes only one argument. Adds the given name to the global
  `*names*` global variable, used to complete arguments of `goodbye`.
  "
  (format t "hello ~a~&" name)
  (push name *names*))

(defun goodbye (name)
  "Says goodbye to name, where `name` should be completed from what was given to `hello`."
  (format t "goodbye ~a~&" name))

(replic.completion:add-completion "goodbye" (lambda () *names*))

(export '(hello goodbye))
#+END_SRC

Note that only the =export='ed  functions and parameters will be taken
into account.

See more examples in the =src/examples.lisp= file of this repository.


*** Set variables

: set *variable*

We kept the "earmuffs" to denote variables.

We get completion on the variables list.

The "t" and "nil" strings are  understood for their lisp meaning, true
and false.


*** Define custom completion for arguments

Write a function or a variable and =export= it.

You can associate a function name with a list of completion candidates (a list
of strings) or a function:

#+BEGIN_SRC lisp
(replic.completion:add-completion "goodbye" (lambda () *names*))
#+END_SRC

When you have many functions that  should complete from the same list,
you can set a default completion function:

#+BEGIN_SRC lisp
(setf replic.completion:*default-command-completion* #'my-function)
#+END_SRC

*** Built-in commands

You get a built-in =help= command that shows the documentation of
functions and variables:

#+BEGIN_SRC text
replic > help

Available commands
==================
help       ... Print the help of all available commands.
reload     ... NIL
set        ... Change this variable.
quit       --- Quit the application.

Available variables
===================
*verbose*  ... Example setting.
#+END_SRC

Write a preamble and a postamble in =*help-preamble*= and =*help-postamble*=.

You can read the help of a specific command or variable (with completion):

: help help

The   general    =help=   shows    the   first   paragraph    of   the
functions/parameters  docstring, the  =help  <cmd>=  function is  more
complete and shows all of it.

** Using replic as a library with an existing system

You can change the prompt. It defaults to "> ". It can contain ansi colours.

#+BEGIN_SRC lisp
(setf replic:*prompt* (cl-ansi-text:green "replic > "))
#+END_SRC

You can  add a  prefix to it,  for example one  that changes  with the
state of the application (current directory,...):

#+BEGIN_SRC lisp
(setf replic:*prompt-prefix* (format t "(~a) " "sthg"))
#+END_SRC

and concatenate the two with =(replic:prompt)=.

If  you want  to  have  the base  commands  (=help=, =reload=,  =set=,
=quit=), import the base package:

#+BEGIN_SRC lisp
(replic:functions-to-commands :replic.base)
#+END_SRC

Create the commands from all the exported functions and variables:

#+BEGIN_SRC lisp
(replic:functions-to-commands :my-package)
#+END_SRC

To exclude functions, use the =:exclude= list:

#+BEGIN_SRC lisp
(replic:functions-to-commands :my-package :exclude '("main"))
#+END_SRC

Create a command from one function:

#+BEGIN_SRC lisp
(replic.completion:add-command :function :package)
;; add a variable:
(replic.completion:add-variable :*variable* :package)
#+END_SRC

Start the repl:

: (replic:repl)

That's it. You didn't have to write the REPL.


*** Settings

 - =*prompt*= (str):  the readline prompt.  Defaults to simply  =>Â =. Can
   contain ansi colours (use =cl-ansi-text:green= for example).

 - =*help-preamble*=: text to display at the beginning of the help.

 - =*help-postamble*=: text to display last.

*** Other helpers

- print colored output from markdown or code with pygments:
  =(format-markdown txt :lang "md")=. It outputs text for a console
  display with ansi colours. Needs [[http://pygments.org][pygments]], or
  does nothing.

** Readline settings

The [[https://tiswww.case.edu/php/chet/readline/readline.html][GNU  Readline]] library provides  settings you might  take advantage
of. We can set the settings in the [[https://tiswww.case.edu/php/chet/readline/readline.html#SEC9][readline init file]] (=~/.inputrc= by
default, obeys the =INPUTRC= environment variable).

For example, you can change the *completion behavior*. This:

: TAB: menu-complete

inserts  the  first completion  candidate,  even  if there  are  many,
instead of showing the list of choices under the prompt.

If you prefer *vi mode*:

: set editing-mode vi

etc. See readline's documentation.

** Dev

This is a  generalization on  =cl-readline=. See  also the  simple [[https://github.com/vindarel/cl-readline-example][cl-readline
example]].  Once you've  built two even basic readline  apps you'll want
to factorize the common parts.

We want to store a list of commands (functions, "verbs") and a list of
variables (the ones to use with "set").  We want to read them from any
Lisp file, hence we need to remember the package they come from. This
mechanism is provided through an interface in =completion.lisp=.

Clone this repo in QL's local projects (=~/quicklisp/local-projects=).

Build the executable:

: make build

*** Develop and test interactively into the console

By starting a swank server in the (real) Lisp repl we can compile code
in our editor  and try instantly in the  terminal, without re-building
the executable. See this [[http://turtleware.eu/posts/cl-charms-crash-course.html][cl-charms  crash course]] for now. Some details
need fixing.


** Resources


- [[https://github.com/vindarel/cl-readline][cl-readline]]
- [[https://github.com/vindarel/cl-readline-example][cl-readline-example]]

Learning:

- [[https://github.com/LispCookbook/cl-cookbook][Common Lisp Cookbook]]
- https://github.com/CodyReichert/awesome-cl#learning-and-tutorials

Getting started:

- [[https://lispcookbook.github.io/cl-cookbook/editor-support.html][Common Lisp editors (Emacs, Portacle, Vim, Lem, Atom, Sublime), notebooks, REPLs]]
- https://lispcookbook.github.io/cl-cookbook/getting-started.html
